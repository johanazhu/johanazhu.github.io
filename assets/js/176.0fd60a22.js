(window.webpackJsonp=window.webpackJsonp||[]).push([[176],{628:function(t,a,s){"use strict";s.r(a);var e=s(25),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"原型与原型链"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#原型与原型链"}},[t._v("#")]),t._v(" 原型与原型链")]),t._v(" "),s("h2",{attrs:{id:"前言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),s("p",[t._v("本章会介绍如下内容：")]),t._v(" "),s("ul",[s("li",[t._v("什么是原型和原型链")]),t._v(" "),s("li",[s("code",[t._v("prototype")]),t._v(" 和 "),s("code",[t._v("__proto__")]),t._v(" 有什么区别")]),t._v(" "),s("li",[s("code",[t._v("new")]),t._v(" 和 "),s("code",[t._v("Object.create()")]),t._v(" 创建对象和实现继承的区别")])]),t._v(" "),s("h2",{attrs:{id:"原型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#原型"}},[t._v("#")]),t._v(" 原型")]),t._v(" "),s("p",[t._v("prototype（原型） 被定义为：给其他对象提供共享属性的对象")]),t._v(" "),s("p",[t._v("如果将 constructor 函数的 prototype 改名为 properties。问题可能少很多。或者进一步简写成 props，理解上将更加简单。不就是 new Constructor 时，自带了它的 Constructor.props 对象嘛")]),t._v(" "),s("p",[t._v("基于 prototype 的继承，可以继承数据、结构和行为三者")]),t._v(" "),s("p",[t._v("原型对象：实际上说的是 XX 对象的原型对象")]),t._v(" "),s("p",[s("strong",[t._v("在JS中每个函数都有一个 prototype 属性，它实际指向的是一个 prototype 对象")]),t._v("，比如有一个函数 Foo，我们来看看 Foo.prototype 这个对象里到底有什么：")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Foo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    \n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Foo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'johan'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Foo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("输出结果为：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://i.loli.net/2021/06/24/jVKFDOt3fahU96X.png",alt:"image-20210624134318726"}})]),t._v(" "),s("p",[t._v("我们可以看到，整个 prototype 对象就有两个属性，一个是 constructor，一个是 "),s("code",[t._v("__proto__")]),t._v("；constructor 是构造函数，"),s("code",[t._v("__proto__")]),t._v(" 是 Object，Foo 的 prototype 就是 Object")]),t._v(" "),s("blockquote",[s("p",[t._v("每一个 JavaScript 对象（除了 null）都具有一个属性，叫 "),s("strong",[t._v("proto")]),t._v("，这个属性会指向该对象的原型")])]),t._v(" "),s("p",[t._v("PS：函数也是对象，也有 "),s("code",[t._v("__proto__")]),t._v(" 属性")]),t._v(" "),s("h2",{attrs:{id:"原型链"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#原型链"}},[t._v("#")]),t._v(" 原型链")]),t._v(" "),s("p",[t._v("高程四")]),t._v(" "),s("blockquote",[s("p",[t._v("重温一下构造函数、原型和实例的关系：每个构造函数都有一个原型对象，原型有一个属性指回构造函数，而实例有一个内部指针（"),s("code",[t._v("__proto__")]),t._v("）指向原型。如果原型是另一个类型的实例呢？那就意味着这个原型本身有一个内部指针指向另一个原型，相应地另一个原型也有一个指针指向另一个构造函数。这样就在实例和原型之间构造了一条原型链。这就是原型链的基本构想")])]),t._v(" "),s("p",[t._v("木易杨")]),t._v(" "),s("blockquote",[s("p",[t._v("每个对象拥有一个原型对象，通过 "),s("code",[t._v("__proto__")]),t._v(" 指针指向上一个原型，并从中继承方法和属性，同时原型对象也可能拥有原型，这样一层一层，最终指向"),s("code",[t._v("null")]),t._v("。这种关系被称为原型链")])]),t._v(" "),s("p",[t._v("本质就是链表")]),t._v(" "),s("p",[t._v("为什么会有原型链为什么有一些库会把方法写到原型链上，这是因为每一个实例的这个方法都是一样的，在实例调用该方法时，可以通过原型（XXX.prototype）找到，而不需要每次实例化都新创建一个XX方法，这个节省内存，显然更合理。\n那么什么是原型，什么又叫原型链？他们和继承又有什么关系？Class和他们是什么关系？")]),t._v(" "),s("p",[t._v("js中如何查看原型")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" obj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nobj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nObject"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getPrototypeOf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n__proto__ 是 chrome 浏览器提供的（可以理解为厂商提供）\ngetPrototypeOf "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("ES5")]),t._v(" 中增加的方法\n")])])]),s("p",[t._v("内置对象Function的原型上默认有哪些属性和对象")]),t._v(" "),s("p",[s("code",[t._v("Function")]),t._v(" 对象继承自 Function.prototype")]),t._v(" "),s("h3",{attrs:{id:"属性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#属性"}},[t._v("#")]),t._v(" 属性")]),t._v(" "),s("p",[s("code",[t._v("Function.arguments")]),t._v(" \t以数组形式获取传入函数的所有参数，此属性已被 "),s("code",[t._v("arguments")]),t._v(" 替代")]),t._v(" "),s("p",[s("code",[t._v("Function.caller")]),t._v(" 获取调用函数的具体对象")]),t._v(" "),s("p",[s("code",[t._v("Function.length")]),t._v(" 获取函数的接受参数个数")]),t._v(" "),s("p",[s("code",[t._v("Function.name")]),t._v(" 获取函数的名称")]),t._v(" "),s("p",[s("code",[t._v("Function.displayName")]),t._v(" 获取函数的 display name")]),t._v(" "),s("p",[s("code",[t._v("Function.prototype.constructor")]),t._v(" 声明函数的原型构造方法")]),t._v(" "),s("h3",{attrs:{id:"方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#方法"}},[t._v("#")]),t._v(" 方法")]),t._v(" "),s("p",[s("strong",[s("code",[t._v("Function.prototype.apply()")]),t._v(" apply 的继承来源自 Function")])]),t._v(" "),s("p",[s("strong",[s("code",[t._v("Function.prototype.bind()")]),t._v(" bind 的继承也来源自 Function")])]),t._v(" "),s("p",[s("strong",[s("code",[t._v("Function.prototype.call()")]),t._v(" call 的继承也是源自 Function")])]),t._v(" "),s("p",[s("code",[t._v("Function.prototype.toString()")]),t._v(" 获取函数的视线源码的字符串，覆盖了"),s("code",[t._v("Object.prototype.toString")])]),t._v(" "),s("p",[s("strong",[t._v("对象分为函数对象和普通对象。所谓的函数对象，其实就是 JavaScript用函数来模式的类实现")])]),t._v(" "),s("p",[t._v("JavaScript 中的 Object 和 Function 就是典型的函数对象。")]),t._v(" "),s("h2",{attrs:{id:"proto"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#proto"}},[t._v("#")]),t._v(" "),s("code",[t._v("_proto_")])]),t._v(" "),s("p",[t._v("首先我们需要明确两点： "),s("code",[t._v("__proto__")]),t._v(" 和 "),s("code",[t._v("constructor")]),t._v(" 是"),s("strong",[t._v("对象")]),t._v("独有的。而 "),s("code",[t._v("prototype")]),t._v(" 属性是"),s("strong",[t._v("函数")]),t._v("独有的")]),t._v(" "),s("p",[s("code",[t._v("__proto__")]),t._v(" 是 "),s("code",[t._v("[[Prototype]]")]),t._v(" 的因历史原因而留下来的 getter/setter")]),t._v(" "),s("p",[s("code",[t._v("__proto__")]),t._v(" 属性有点过时了，它的存在是出于历史的原因，现代编程预约建议我们应该使用函数"),s("code",[t._v("Object.getPrototypeOf/Object.setPrototypeOf")]),t._v(" 来取代 "),s("code",[t._v("__proto__")]),t._v(" 去 get/set 原型")]),t._v(" "),s("p",[t._v("prototype 是构造函数的属性，而 "),s("code",[t._v("__proto__")]),t._v(" 是对象的属性")]),t._v(" "),s("h2",{attrs:{id:"new-vs-object-create"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#new-vs-object-create"}},[t._v("#")]),t._v(" new VS Object.create()")]),t._v(" "),s("p",[t._v("new 是隐形继承")]),t._v(" "),s("p",[t._v("Object.create() 是显形继承")]),t._v(" "),s("h2",{attrs:{id:"面试题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#面试题"}},[t._v("#")]),t._v(" 面试题")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("A")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("B")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("A")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("B")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("A")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("B")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("A")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("apply")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" arguments"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("B")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__ "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("A")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype\n\nb"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__ "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("B")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype\n")])])]),s("p",[t._v("https://zhuanlan.zhihu.com/p/356980105")]),t._v(" "),s("p",[t._v("https://segmentfault.com/a/1190000011801127?v=20171103")]),t._v(" "),s("h2",{attrs:{id:"参考资料"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[t._v("#")]),t._v(" 参考资料")]),t._v(" "),s("ul",[s("li",[s("p",[s("a",{attrs:{href:"https://limeii.github.io/2019/05/js-prototype/",target:"_blank",rel:"noopener noreferrer"}},[t._v("JS：深入理解JavaScript-原型"),s("OutboundLink")],1)])]),t._v(" "),s("li",[s("p",[s("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=MzA4Njc2MTE3Ng==&mid=2456151505&idx=1&sn=07de1105b4779510444703d3cca52336&chksm=88528e66bf2507701f2593b03eea15809de54054ea8aa3bd40a174773065c577782a4849463e&mpshare=1&scene=1&srcid=0309uLjOLfJNRzjKNAZhU0cv&sharer_sharetime=1615281032709&sharer_shareid=778ad5bf3b27e0078eb105d7277263f6&key=c04e2b9ed744a6145f96a45d0f35feed9b31918fdaebb7da9d1fd16c9d835a875f6df79abf4c5060a78c79e677bc095578be94a64cffb0982adb1f3a5654ab5df8b9deec7424e3e9f4969fd99998ca75b5dfeed2a07fbba4bb46d2db7a6ed09048890bc737c545987956f30d638455a420543b85ce62544a7453eaed0ccb5179&ascene=1&uin=MTA0NTY0NDM2MQ%3D%3D&devicetype=Windows+10+x64&version=62090070&lang=zh_CN&exportkey=ARSsSQ56FpBr7dPsNSJf4hM%3D&pass_ticket=x4jvdfIuLwC89CyvjbvfIU1MWevsFYaIGHAG4pfEH%2FSqHCoWE00Ac0tHo69Gk3MB&wx_header=0",target:"_blank",rel:"noopener noreferrer"}},[t._v("深入理解 JavaScript 原型"),s("OutboundLink")],1)])]),t._v(" "),s("li",[s("p",[s("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=MzA3MzA5MDY2NA==&mid=2247486446&idx=1&sn=6c2bbf90fc85e35c1cc9c8845ee8d028&chksm=9f1518e9a86291ff411acf855539c7e859bf79e2dfb9a1f093ece57c0e408386ae10192d89bd&mpshare=1&scene=1&srcid=&sharer_sharetime=1585111588911&sharer_shareid=778ad5bf3b27e0078eb105d7277263f6#rd",target:"_blank",rel:"noopener noreferrer"}},[t._v("2020面试收获 - js原型及原型链"),s("OutboundLink")],1)])]),t._v(" "),s("li",[s("p",[s("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=MzA5MTI0ODUzNQ==&mid=2652951300&idx=1&sn=e60266b2ad0976ec041669357ef8fec4&chksm=8bab31fcbcdcb8ea204b14cc257335a7800d576b96f27392a4a35e3efac886e8d9948f0ce97f&mpshare=1&scene=1&srcid=&sharer_sharetime=1575797254136&sharer_shareid=778ad5bf3b27e0078eb105d7277263f6#rd",target:"_blank",rel:"noopener noreferrer"}},[t._v("你还没学会JavaScript原型和原型链吗？"),s("OutboundLink")],1)])]),t._v(" "),s("li",[s("p",[s("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=MzA5NzkwNDk3MQ==&mid=2650590695&idx=1&sn=d6cfd8c2b7d87ec26a99a738f9ca825e&chksm=8891ddc3bfe654d5c977127f94248d3d280d04f6a5dc38b2da3eeb54e89f05ee0d5a854bf870&mpshare=1&scene=1&srcid=&sharer_sharetime=1575108712052&sharer_shareid=778ad5bf3b27e0078eb105d7277263f6#rd",target:"_blank",rel:"noopener noreferrer"}},[t._v("深入浅出 JavaScript 原型链"),s("OutboundLink")],1)])]),t._v(" "),s("li",[s("p",[s("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=MzIxNjgwMDIzMA==&mid=2247484388&idx=1&sn=8f71421cfe2490284739ec9a41d3117c&chksm=9782cd6da0f5447b6e7c41fa1264127210064f9b80cc0848bb55af0ce450fb5cf76988ec2081&mpshare=1&scene=1&srcid=&sharer_sharetime=1572511539484&sharer_shareid=778ad5bf3b27e0078eb105d7277263f6#rd",target:"_blank",rel:"noopener noreferrer"}},[t._v("【THE LAST TIME】一文吃透所有JS原型相关知识点"),s("OutboundLink")],1)])])])])}),[],!1,null,null,null);a.default=n.exports}}]);