(window.webpackJsonp=window.webpackJsonp||[]).push([[261],{718:function(e,t,r){"use strict";r.r(t);var a=r(25),v=Object(a.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"node基础"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#node基础"}},[e._v("#")]),e._v(" Node基础")]),e._v(" "),r("h2",{attrs:{id:"node-是什么"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#node-是什么"}},[e._v("#")]),e._v(" Node 是什么")]),e._v(" "),r("p",[e._v("Node 是 JavaScript 的一种运行环境，是一个基于 Chrome V8 引擎建立的一个平台。由于采用了事件驱动、非阻塞 I/O 的模型，Node 能够成为了构建轻量且高效的 Web 应用的理想选择")]),e._v(" "),r("h2",{attrs:{id:"node-js-特点"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#node-js-特点"}},[e._v("#")]),e._v(" Node.js 特点")]),e._v(" "),r("p",[e._v("非阻塞I/O")]),e._v(" "),r("p",[e._v("单线程")]),e._v(" "),r("p",[e._v("事件驱动")]),e._v(" "),r("p",[e._v("npm 包管理")]),e._v(" "),r("p",[e._v("无缓冲")]),e._v(" "),r("p",[e._v("可扩展")]),e._v(" "),r("h2",{attrs:{id:"node-全局对象"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#node-全局对象"}},[e._v("#")]),e._v(" Node 全局对象")]),e._v(" "),r("p",[e._v("在浏览器中，我们有 "),r("code",[e._v("document")]),e._v(" 和 "),r("code",[e._v("window")]),e._v(" 等全局对象；而 Node 只包含 ECMAScript 和 V8，不包含 BOM 和 DOM，因此 Node 中不存在 "),r("code",[e._v("document")]),e._v(" 和 "),r("code",[e._v("window")]),e._v("；取而代之，Node 专属的全局对象是 "),r("code",[e._v("process")])]),e._v(" "),r("h3",{attrs:{id:"javascript-全局对象的分类"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#javascript-全局对象的分类"}},[e._v("#")]),e._v(" JavaScript 全局对象的分类")]),e._v(" "),r("p",[e._v("在此之前，我们先看一下 JavaScript 各个运行环境的全局对象的比较，如下图所示：")]),e._v(" "),r("p",[r("img",{attrs:{src:"https://i.loli.net/2021/08/22/HfksCreUZlO37Kx.png",alt:"各个运行环境的全局对象"}})]),e._v(" "),r("p",[e._v("可以看到 JavaScript 全局对象可以分为四类：")]),e._v(" "),r("ol",[r("li",[e._v("浏览器专属，例如 "),r("code",[e._v("window")]),e._v("、"),r("code",[e._v("alert")]),e._v(" 等等；")]),e._v(" "),r("li",[e._v("Node 专属，例如 "),r("code",[e._v("process")]),e._v("、"),r("code",[e._v("__dirname")]),e._v(" 、"),r("code",[e._v("__filename")]),e._v(" 等等")]),e._v(" "),r("li",[e._v("浏览器和 Node 共有，但是实现方式不同，例如 "),r("code",[e._v("console")]),e._v(" 、"),r("code",[e._v("setTimeout")]),e._v(" 、"),r("code",[e._v("setInterval")])]),e._v(" "),r("li",[e._v("浏览器和 Node 共有，并且属于 ECMAScript 语言定义的一部分，例如 "),r("code",[e._v("Date")]),e._v("、"),r("code",[e._v("String")]),e._v("、"),r("code",[e._v("promise")]),e._v(" 等")])]),e._v(" "),r("h3",{attrs:{id:"node-专属全局对象解析"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#node-专属全局对象解析"}},[e._v("#")]),e._v(" Node 专属全局对象解析")]),e._v(" "),r("h4",{attrs:{id:"process进程"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#process进程"}},[e._v("#")]),e._v(" process进程")]),e._v(" "),r("p",[e._v("process 全局对象可以说是 Node.js 的灵魂，它是管理当前 Node.js 进程状态的对象，提供了与操作系统的简单接口。")]),e._v(" "),r("h5",{attrs:{id:"有哪些属性"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#有哪些属性"}},[e._v("#")]),e._v(" 有哪些属性")]),e._v(" "),r("ul",[r("li",[r("code",[e._v("pid")]),e._v("：进程编号")]),e._v(" "),r("li",[r("code",[e._v("env")]),e._v("：系统环境变量")]),e._v(" "),r("li",[r("code",[e._v("argv")]),e._v("：命令行执行此脚本时的输入参数")]),e._v(" "),r("li",[r("code",[e._v("platform")]),e._v("：当前操作系统的平台")])]),e._v(" "),r("blockquote",[r("p",[e._v("提示")]),e._v(" "),r("p",[e._v("可以在 Node REPL 中尝试一下这些对象。像上面说的那样进入 REPL（你的输出很有可能跟我的不一样）：")]),e._v(" "),r("div",{staticClass:"language-shell extra-class"},[r("pre",{pre:!0,attrs:{class:"language-shell"}},[r("code",[e._v("$ node\nWelcome to Node.js v12.10.0.\nType "),r("span",{pre:!0,attrs:{class:"token string"}},[e._v('".help"')]),e._v(" "),r("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("for")]),e._v(" "),r("span",{pre:!0,attrs:{class:"token function"}},[e._v("more")]),e._v(" information.\n"),r("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" process.pid\n"),r("span",{pre:!0,attrs:{class:"token number"}},[e._v("3")]),e._v("\n"),r("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" process.platform\n"),r("span",{pre:!0,attrs:{class:"token string"}},[e._v("'darwin'")]),e._v("\n")])])])]),e._v(" "),r("h4",{attrs:{id:"buffer"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#buffer"}},[e._v("#")]),e._v(" Buffer")]),e._v(" "),r("p",[r("code",[e._v("Buffer")]),e._v(" 全局对象让 JavaScript 也能够轻松地处理二进数据流，结合 Node 的流接口（Stream），能够实现高效的二进制文件处理")]),e._v(" "),r("h4",{attrs:{id:"filename-和-dirname"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#filename-和-dirname"}},[e._v("#")]),e._v(" "),r("code",[e._v("__filename")]),e._v(" 和 "),r("code",[e._v("__dirname")])]),e._v(" "),r("p",[e._v("分别代表当前所运行 Node 脚本的文件路径和所在目录路径")]),e._v(" "),r("h4",{attrs:{id:"module-模块"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#module-模块"}},[e._v("#")]),e._v(" module 模块")]),e._v(" "),r("p",[e._v("Node 实现了一个简单模块记在系统。在 Node 中，文件和模块是一一对应的关系，可以理解为一个文件就是一个模块。其模块系统的实现主要依赖于全局对象 module，其中实现了 exports（导出）、require（加载）机制")]),e._v(" "),r("p",[e._v("简单来说，commonJS 导出的是值的拷贝，而非值的引用，这与 "),r("RouterLink",{attrs:{to:"/ES6/深入理解ES6模块机制.html"}},[e._v("ES6中的模块化")]),e._v("是不一样的")],1),e._v(" "),r("p",[e._v("具体可以跳转这里看 "),r("RouterLink",{attrs:{to:"/Node中的模块机制.html"}},[e._v("Node中的模块机制")])],1),e._v(" "),r("h3",{attrs:{id:"参考资料"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[e._v("#")]),e._v(" 参考资料")]),e._v(" "),r("p",[r("a",{attrs:{href:"https://tuture.co/2019/12/03/892fa12/",target:"_blank",rel:"noopener noreferrer"}},[e._v("一杯茶的时间，上手 Node.js"),r("OutboundLink")],1)]),e._v(" "),r("p",[r("a",{attrs:{href:"https://github.com/tuture-dev/nodejs-roadmap",target:"_blank",rel:"noopener noreferrer"}},[e._v("Node.js 后端工程师学习路径"),r("OutboundLink")],1)]),e._v(" "),r("p",[r("a",{attrs:{href:"https://juejin.cn/post/6844904029219192839",target:"_blank",rel:"noopener noreferrer"}},[e._v("「万字整理 」这里有一份Node.js入门指南和实践,请注意查收"),r("OutboundLink")],1)]),e._v(" "),r("p",[r("a",{attrs:{href:"https://mp.weixin.qq.com/s/wezc-VpKOXilEnsHvSuU9g",target:"_blank",rel:"noopener noreferrer"}},[e._v("一篇文章构建你的 NodeJS 知识体系"),r("OutboundLink")],1)])])}),[],!1,null,null,null);t.default=v.exports}}]);