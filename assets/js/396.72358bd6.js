(window.webpackJsonp=window.webpackJsonp||[]).push([[396],{855:function(e,t,a){"use strict";a.r(t);var r=a(25),n=Object(r.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("p",[e._v("babel 的使用")]),e._v(" "),a("p",[e._v("什么是babel？")]),e._v(" "),a("p",[e._v("用最新的标准编写的 javascript 代码向下编译成可以砸今天随处可用的版本")]),e._v(" "),a("p",[e._v("babel-core")]),e._v(" "),a("p",[e._v("核心包，把js代码分析为ast")]),e._v(" "),a("p",[e._v("babel-node")]),e._v(" "),a("h3",{attrs:{id:"plugins-插件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#plugins-插件"}},[e._v("#")]),e._v(" plugins(插件)")]),e._v(" "),a("p",[e._v("babel插件")]),e._v(" "),a("h3",{attrs:{id:"presets-预设"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#presets-预设"}},[e._v("#")]),e._v(" presets(预设)")]),e._v(" "),a("p",[e._v("可以理解为plugins 的集合，不同的presets包含不同的plugins")]),e._v(" "),a("p",[e._v("比如 @babel-presets-react 包含了写react需要用到的 @babel/plugin-syntax-jsx, @babel/plugins-transform-react-jsx, @babel/plugins-transform-react-display-name等")]),e._v(" "),a("p",[e._v("而最为常用的，也是被官方推荐的，是@babel/presets-env。默认情况下，所有已被纳入规范的语法（ES2015,ES2016,ES2017,ES2018,Modules）所需要使用的plugins都包含在env这个presets中。")]),e._v(" "),a("h3",{attrs:{id:"polyfill-代码填充-兼容性补丁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#polyfill-代码填充-兼容性补丁"}},[e._v("#")]),e._v(" Polyfill(代码填充，兼容性补丁)")]),e._v(" "),a("p",[e._v("babel 插件专注于对语法做转换，而有些浏览器不识别某些api，最简答的方法就是用浏览器能识别的方法为Array写一个静态方法isArray")]),e._v(" "),a("p",[e._v("ps:某些浏览器没有isArray api，polyfill用浏览器能识别的方法为Array写一个isArray函数")]),e._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[e._v("Array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[e._v("isArray")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[e._v("arg")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("var")]),e._v(" toString "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("toString"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("return")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("arg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("slice")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("==")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'Array'")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),a("p",[e._v("webpack")]),e._v(" "),a("p",[e._v("一个问题")]),e._v(" "),a("p",[e._v('如何使用在react-route中使用require("./app.js")')]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(' <Route path="/app" component={require("./app.js")}/>\n')])])]),a("p",[e._v("我知道肯定用了babel的一个插件")]),e._v(" "),a("p",[e._v("但是试了好多，都不对")]),e._v(" "),a("h1",{attrs:{id:"treeshaking"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#treeshaking"}},[e._v("#")]),e._v(" treeShaking")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://link.juejin.im?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fwebpack-merge",target:"_blank",rel:"noopener noreferrer"}},[e._v("webpack-merge"),a("OutboundLink")],1),e._v(": 用于合并webpack的公共配置和环境配置(合并webpack.config.js和webpack.development.js或者webpack.production.js)")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://link.juejin.im?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fyargs-parser",target:"_blank",rel:"noopener noreferrer"}},[e._v("yargs-parser"),a("OutboundLink")],1),e._v(': 用于将我们的npm scripts中的命令行参数转换成键值对的形式如 --mode development会被解析成键值对的形式mode: "development"，便于在配置文件中获取参数')]),e._v(" "),a("p",[a("a",{attrs:{href:"https://link.juejin.im?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fclean-webpack-plugin",target:"_blank",rel:"noopener noreferrer"}},[e._v("clean-webpack-plugin"),a("OutboundLink")],1),e._v(": 用于清除本地文件，在进行生产环境打包的时候，如果不清除dist文件夹，那么每次打包都会生成不同的js文件或者css文件堆积在文件夹中，因为每次打包都会生成不同的hash值导致每次打包生成的文件名与上次打包不一样不会覆盖上次打包留下来的文件")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://link.juejin.im?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fprogress-bar-webpack-plugin",target:"_blank",rel:"noopener noreferrer"}},[e._v("progress-bar-webpack-plugin"),a("OutboundLink")],1),e._v(": 打包编译的时候以进度条的形式反馈打包进度")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://link.juejin.im?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fwebpack-build-notifier",target:"_blank",rel:"noopener noreferrer"}},[e._v("webpack-build-notifier"),a("OutboundLink")],1),e._v(": 当你打包之后切换到别的页面的时候，完成时会在本地系统弹出一个提示框告知你打包结果(成功或失败或警告)")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://link.juejin.im?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fhtml-webpack-plugin",target:"_blank",rel:"noopener noreferrer"}},[e._v("html-webpack-plugin"),a("OutboundLink")],1),e._v(": 自动生成html,并默认将打包生成的js、css引入到html文件中")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://link.juejin.im?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fmini-css-extract-plugin",target:"_blank",rel:"noopener noreferrer"}},[e._v("mini-css-extract-plugin"),a("OutboundLink")],1),e._v(": webpack打包样式文件中的默认会把样式文件代码打包到bundle.js中，"),a("a",{attrs:{href:"https://link.juejin.im?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fmini-css-extract-plugin",target:"_blank",rel:"noopener noreferrer"}},[e._v("mini-css-extract-plugin"),a("OutboundLink")],1),e._v("这个插件可以将样式文件从bundle.js抽离出来一个文件，并且支持chunk css")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://link.juejin.im?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fadd-asset-html-webpack-plugin",target:"_blank",rel:"noopener noreferrer"}},[e._v("add-asset-html-webpack-plugin"),a("OutboundLink")],1),e._v(": 从命名可以看出，它的作用是可以将静态资源css或者js引入到"),a("a",{attrs:{href:"https://link.juejin.im?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fhtml-webpack-plugin",target:"_blank",rel:"noopener noreferrer"}},[e._v("html-webpack-plugin"),a("OutboundLink")],1),e._v("生成的html文件中")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://link.juejin.im?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fuglifyjs-webpack-plugin",target:"_blank",rel:"noopener noreferrer"}},[e._v("uglifyjs-webpack-plugin"),a("OutboundLink")],1),e._v(": 代码丑化，用于js压缩(可以调用系统的线程进行"),a("strong",[e._v("多线程压缩")]),e._v("，优化webpack的"),a("strong",[e._v("压缩速度")]),e._v(")")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://link.juejin.im?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Foptimize-css-assets-webpack-plugin",target:"_blank",rel:"noopener noreferrer"}},[e._v("optimize-css-assets-webpack-plugin"),a("OutboundLink")],1),e._v(": css压缩，主要使用 "),a("a",{attrs:{href:"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fcssnano%2Fcssnano",target:"_blank",rel:"noopener noreferrer"}},[e._v("cssnano"),a("OutboundLink")],1),e._v(" 压缩器(webpack4的执行环境内置了cssnano，所以不用安装)")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://link.juejin.im?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Ffriendly-errors-webpack-plugin",target:"_blank",rel:"noopener noreferrer"}},[e._v("friendly-errors-webpack-plugin"),a("OutboundLink")],1),e._v(": 能够更好在终端看到webapck运行的警告和错误")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://link.juejin.im?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fhappypack",target:"_blank",rel:"noopener noreferrer"}},[e._v("happypack"),a("OutboundLink")],1),e._v(": 多线程编译，加快编译速度(加快loader的编译速度)，注意，thread-loader不可以和 mini-css-extract-plugin 结合使用")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://link.juejin.im?target=https%3A%2F%2Fwebpack.docschina.org%2Fplugins%2Fsplit-chunks-plugin%2F%23src%2Fcomponents%2FSidebar%2FSidebar.jsx",target:"_blank",rel:"noopener noreferrer"}},[e._v("splitChunks"),a("OutboundLink")],1),e._v(": CommonChunkPlugin 的后世，用于对bundle.js进行chunk切割(webpack的内置插件)")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://link.juejin.im?target=https%3A%2F%2Fwebpack.docschina.org%2Fplugins%2Fdll-plugin%2F%23src%2Fcomponents%2FSidebar%2FSidebar.jsx",target:"_blank",rel:"noopener noreferrer"}},[e._v("DllPlugin"),a("OutboundLink")],1),e._v(": 将模块预先编译，它会在第一次编译的时候将配置好的需要预先编译的模块编译在缓存中，第二次编译的时候，解析到这些模块就直接使用缓存，而不是去编译这些模块(webpack的内置插件)")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://link.juejin.im?target=https%3A%2F%2Fwebpack.docschina.org%2Fplugins%2Fdll-plugin%2F%23dllreferenceplugin",target:"_blank",rel:"noopener noreferrer"}},[e._v("DllReferencePlugin"),a("OutboundLink")],1),e._v(": 将预先编译好的模块关联到当前编译中，当 webpack 解析到这些模块时，会直接使用预先编译好的模块(webpack的内置插件)")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://link.juejin.im?target=https%3A%2F%2Fwebpack.docschina.org%2Fplugins%2Fhot-module-replacement-plugin%2F%23src%2Fcomponents%2FSidebar%2FSidebar.jsx",target:"_blank",rel:"noopener noreferrer"}},[e._v("HotModuleReplacementPlugin"),a("OutboundLink")],1),e._v(": 实现局部热加载(刷新)，区别与在webpack-dev-server的全局刷新(webpack的内置插件)")])])}),[],!1,null,null,null);t.default=n.exports}}]);