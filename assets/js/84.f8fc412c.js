(window.webpackJsonp=window.webpackJsonp||[]).push([[84],{520:function(t,s,a){"use strict";a.r(s);var n=a(25),r=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"前端算法与数据结构面试笔记"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前端算法与数据结构面试笔记"}},[t._v("#")]),t._v(" 前端算法与数据结构面试笔记")]),t._v(" "),a("h3",{attrs:{id:"前言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),a("p",[t._v("学习观念："),a("strong",[t._v("前端工程师如果不是为了面试，那么不建议花大力气折腾算法（尤其是在业余时间本身非常有限的情况下），你应该考虑把更多的时间用来做工程")]),t._v("。")]),t._v(" "),a("p",[a("strong",[t._v("所谓工程能力，本质是“解决问题的能力”，无论是硬编码实力、还是架构思想，其本质都是为了解决问题这个终极目标而服务")]),t._v(" 。")]),t._v(" "),a("h3",{attrs:{id:"快速上手-从0到1掌握面试需要的数据结构-一"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#快速上手-从0到1掌握面试需要的数据结构-一"}},[t._v("#")]),t._v(" 快速上手——从0到1掌握面试需要的数据结构（一）")]),t._v(" "),a("p",[t._v("数据结构层面需掌握")]),t._v(" "),a("ul",[a("li",[t._v("数组")]),t._v(" "),a("li",[t._v("栈")]),t._v(" "),a("li",[t._v("队列")]),t._v(" "),a("li",[t._v("链表")]),t._v(" "),a("li",[t._v("树（主要讲二叉树）")])]),t._v(" "),a("h3",{attrs:{id:"快速上手-从0到1掌握面试需要的数据结构-二"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#快速上手-从0到1掌握面试需要的数据结构-二"}},[t._v("#")]),t._v(" 快速上手——从0到1掌握面试需要的数据结构（二 ）")]),t._v(" "),a("p",[t._v("在涉及链表删除操作的题目中，重点不是定位目标结点，而是"),a("strong",[t._v("定位目标结点的前驱结点")])]),t._v(" "),a("p",[t._v("JS 数组未必是真正的数组")]),t._v(" "),a("p",[t._v("何谓“真正的数组”？在各大教材（包括百科词条）对数组的定义中，都有一个“存储在连续的内存空间里”这样的必要条件。")]),t._v(" "),a("p",[t._v("链表的插入/删除效率较高，而访问效率较低；数组的访问效率较高，而插入效率较低")]),t._v(" "),a("h3",{attrs:{id:"快速上手-从0到1掌握算法面试需要的数据结构-三"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#快速上手-从0到1掌握算法面试需要的数据结构-三"}},[t._v("#")]),t._v(" 快速上手——从0到1掌握算法面试需要的数据结构（三）")]),t._v(" "),a("h4",{attrs:{id:""}},[a("a",{staticClass:"header-anchor",attrs:{href:"#"}},[t._v("#")])]),t._v(" "),a("h4",{attrs:{id:"理解二叉树结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#理解二叉树结构"}},[t._v("#")]),t._v(" 理解二叉树结构")]),t._v(" "),a("p",[t._v("二叉树是指满足以下要求的树：")]),t._v(" "),a("ul",[a("li",[t._v("它可以没有根结点，作为一棵空树存在")]),t._v(" "),a("li",[t._v("如果它不是空树，那么"),a("strong",[t._v("必须由根结点、左子树和右子树组成，且左右子树都是二叉树")]),t._v("。如下图：")])]),t._v(" "),a("p",[t._v("二叉树构造函数")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 二叉树结点的构造函数")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("TreeNode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("val")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("val "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" val"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("left "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("right "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"递归初相见-二叉树递归遍历的三种姿势"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#递归初相见-二叉树递归遍历的三种姿势"}},[t._v("#")]),t._v(" 递归初相见——二叉树递归遍历的三种姿势")]),t._v(" "),a("p",[t._v("遍历方式有以下四种：")]),t._v(" "),a("ul",[a("li",[t._v("先序遍历")]),t._v(" "),a("li",[t._v("中序遍历")]),t._v(" "),a("li",[t._v("后序遍历")]),t._v(" "),a("li",[t._v("层次遍历")])]),t._v(" "),a("p",[t._v("那么遍历的可能顺序也不过三种：")]),t._v(" "),a("ul",[a("li",[t._v("根结点 -> 左子树 -> 右子树\t先序遍历")]),t._v(" "),a("li",[t._v("左子树 -> 根结点 -> 右子树    中序遍历")]),t._v(" "),a("li",[t._v("左子树 -> 右子树 -> 根结点    后序遍历")])]),t._v(" "),a("p",[t._v("先序遍历的编码实现：")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 所有遍历函数的入参都是树的根节点对象")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("preorder")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("root")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 递归边界，root 为空")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("root"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 输出当前遍历的节点值")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'当前遍历的结点值是：'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" root"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("val"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 递归遍历左子树")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("preorder")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("root"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("left"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 递归遍历右子树")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("preorder")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("root"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("right"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("各位现在完全可以再回过头来看一下我们前面示例的这棵二叉树：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2020/4/6/1714ec60340dc2db?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"img"}})]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("当前遍历的结点值是： "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("A")]),t._v("\n当前遍历的结点值是： "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("B")]),t._v("\n当前遍历的结点值是： "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("D")]),t._v("\n当前遍历的结点值是： "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("E")]),t._v("\n当前遍历的结点值是： "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("C")]),t._v("\n当前遍历的结点值是： "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("F")]),t._v("\n")])])]),a("h4",{attrs:{id:"中序遍历"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#中序遍历"}},[t._v("#")]),t._v(" 中序遍历：")]),t._v(" "),a("p",[t._v("左子树 -> 根结点 -> 右子树：")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 所有遍历函数的入参都是树的根结点对象")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("inorder")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("root")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 递归边界，root 为空")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("root"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" \n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n     \n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 递归遍历左子树 ")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("inorder")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("root"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("left"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  \n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 输出当前遍历的结点值")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'当前遍历的结点值是：'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" root"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("val"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  \n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 递归遍历右子树  ")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("inorder")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("root"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("right"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("当前遍历的结点值是： "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("D")]),t._v("\n当前遍历的结点值是： "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("B")]),t._v("\n当前遍历的结点值是： "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("E")]),t._v("\n当前遍历的结点值是： "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("A")]),t._v("\n当前遍历的结点值是： "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("C")]),t._v("\n当前遍历的结点值是： "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("F")]),t._v("\n")])])]),a("h4",{attrs:{id:"后序遍历"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#后序遍历"}},[t._v("#")]),t._v(" 后序遍历")]),t._v(" "),a("p",[t._v("左子树 -> 右子树 -> 根结点")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("postorder")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("root")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 递归边界， root 为空")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("root"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" \n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 递归遍历左子树")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("postorder")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("root"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("left"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 递归遍历右子树")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("postorder")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("root"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("right"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 输出当前遍历的结点值")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'当前遍历的结点值是：'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" root"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("val"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("输出结果：")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("当前遍历的结点值是： "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("D")]),t._v("\n当前遍历的结点值是： "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("E")]),t._v("\n当前遍历的结点值是： "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("B")]),t._v("\n当前遍历的结点值是： "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("F")]),t._v("\n当前遍历的结点值是： "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("C")]),t._v("\n当前遍历的结点值是： "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("A")]),t._v("\n")])])])])}),[],!1,null,null,null);s.default=r.exports}}]);