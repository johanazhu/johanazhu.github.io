(window.webpackJsonp=window.webpackJsonp||[]).push([[83],{518:function(t,s,a){"use strict";a.r(s);var e=a(25),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"数据结构与算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据结构与算法"}},[t._v("#")]),t._v(" 数据结构与算法")]),t._v(" "),a("p",[t._v("算法目前在前端面试中常出现，有什么办法可以提升呢？")]),t._v(" "),a("p",[t._v("我的方法是每天练习")]),t._v(" "),a("p",[t._v("做了一个实验，每天早起写一个 leetcode 题，并且公开我的库练习库 "),a("a",{attrs:{href:"https://github.com/johanazhu/leetcode",target:"_blank",rel:"noopener noreferrer"}},[t._v("leetcode"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("这里，我对一些数据结构与算法做一分钟解释，具体练习可以看我的算题记录")]),t._v(" "),a("h2",{attrs:{id:"复杂度分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#复杂度分析"}},[t._v("#")]),t._v(" 复杂度分析")]),t._v(" "),a("p",[t._v("时间复杂度")]),t._v(" "),a("p",[t._v("空间复杂度")]),t._v(" "),a("h2",{attrs:{id:"数据结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据结构"}},[t._v("#")]),t._v(" 数据结构")]),t._v(" "),a("p",[a("a",{attrs:{href:"#%E5%AD%97%E7%AC%A6%E4%B8%B2"}},[t._v("字符串")])]),t._v(" "),a("p",[a("a",{attrs:{href:"#%E6%95%B0%E7%BB%84"}},[t._v("数组")])]),t._v(" "),a("p",[a("a",{attrs:{href:"#%E9%93%BE%E8%A1%A8"}},[t._v("链表")])]),t._v(" "),a("p",[a("a",{attrs:{href:"#%E6%A0%88%EF%BC%88Stack%EF%BC%89"}},[t._v("栈")])]),t._v(" "),a("p",[a("a",{attrs:{href:"#%E9%98%9F%E5%88%97%EF%BC%88Queue%EF%BC%89"}},[t._v("队列")])]),t._v(" "),a("p",[a("a",{attrs:{href:"#%E5%93%88%E5%B8%8C%E8%A1%A8"}},[t._v("哈希表")])]),t._v(" "),a("p",[a("a",{attrs:{href:"#%E5%A0%86"}},[t._v("堆")])]),t._v(" "),a("p",[t._v("跳表")]),t._v(" "),a("p",[t._v("图")]),t._v(" "),a("p",[t._v("二叉树")]),t._v(" "),a("p",[t._v("Tire数")]),t._v(" "),a("h2",{attrs:{id:"算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#算法"}},[t._v("#")]),t._v(" 算法")]),t._v(" "),a("p",[t._v("递归")]),t._v(" "),a("p",[t._v("排序")]),t._v(" "),a("p",[t._v("二分查找")]),t._v(" "),a("p",[t._v("BFS")]),t._v(" "),a("p",[t._v("DFS")]),t._v(" "),a("p",[t._v("滑动窗口（双指针）")]),t._v(" "),a("p",[t._v("搜索")]),t._v(" "),a("p",[t._v("哈希")]),t._v(" "),a("p",[t._v("贪心")]),t._v(" "),a("p",[t._v("分治")]),t._v(" "),a("p",[t._v("回溯")]),t._v(" "),a("p",[t._v("动态规划")]),t._v(" "),a("h3",{attrs:{id:"字符串"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字符串"}},[t._v("#")]),t._v(" 字符串")]),t._v(" "),a("p",[t._v("字符串概述")]),t._v(" "),a("h3",{attrs:{id:"数组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数组"}},[t._v("#")]),t._v(" 数组")]),t._v(" "),a("p",[t._v("数组（Array）是一种线性表数据结构。它用一组连续的内存空间，来存储一组具有相同类型的数据")]),t._v(" "),a("h3",{attrs:{id:"链表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#链表"}},[t._v("#")]),t._v(" 链表")]),t._v(" "),a("p",[t._v("链表和数组相似，他们都是有序的列表、都是线性结构（有且仅有一个前驱、有且仅有一个后继）。不同点在于，链表中，数据单位的名称叫做“结点”，而结点和结点的分布，在内存中可以是"),a("strong",[t._v("离散")]),t._v("的")]),t._v(" "),a("h3",{attrs:{id:"栈-stack"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#栈-stack"}},[t._v("#")]),t._v(" 栈（Stack）")]),t._v(" "),a("p",[t._v("栈是一种后进先出（LIFO，Last In First Out）的数据结构")]),t._v(" "),a("p",[t._v("只用 pop 和 push 完成增删的“数组”")]),t._v(" "),a("p",[t._v("它由两个特征：")]),t._v(" "),a("ul",[a("li",[t._v("只允许从尾部添加元素")]),t._v(" "),a("li",[t._v("只允许从尾部取出元素")])]),t._v(" "),a("p",[a("strong",[t._v("对应到数组的方法，刚好就是 push 和 pop。因此我们可以认为在 JavaScript 中，栈就是限制只能用 push 来添加元素，同事只能用 pop 来移除元素的一种特殊的数组")])]),t._v(" "),a("p",[t._v("除了 pop 和 push 之外，栈相关的面试题中往往还会涉及到取栈顶元素的操作。所谓栈顶元素，实际上它值得就是数组尾部的元素")]),t._v(" "),a("h3",{attrs:{id:"队列-queue"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#队列-queue"}},[t._v("#")]),t._v(" 队列（Queue）")]),t._v(" "),a("p",[t._v("队列是一种先进先出（FIFO，First In First Out）的数据结构")]),t._v(" "),a("p",[t._v("只用 push 和 shift 完成增删的“数组”")]),t._v(" "),a("p",[t._v("它就像我们去排队（没有插队的情况下）。先排队的人先轮到，后排到的人后轮到")]),t._v(" "),a("p",[t._v("两个特征：")]),t._v(" "),a("ul",[a("li",[t._v("只允许从尾部添加元素")]),t._v(" "),a("li",[t._v("只允许从头部移除元素")])]),t._v(" "),a("p",[t._v("整个过程只涉及了数组的 push 和 shift 方法")]),t._v(" "),a("p",[t._v("在栈元素入栈时，我们关系的是栈顶元素（数组的最后一个元素）；队列元素出栈时，我们关心的则是队头元素（数组的第一个元素）")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" queue "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\nqueue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'first son'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nqueue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'second son'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nqueue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'third son'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("queue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" top "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" queue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("top"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'轮到你'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    queue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("shift")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 出栈")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\nqueue\n")])])]),a("h3",{attrs:{id:"十大经典算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#十大经典算法"}},[t._v("#")]),t._v(" 十大经典算法")]),t._v(" "),a("p",[t._v("https://mp.weixin.qq.com/s?__biz=MjM5NDkxMTgyNw==&mid=2653061880&idx=2&sn=1d704d7f84bfa7264d02a509f96b5839&chksm=bd56a1c48a2128d25b23c0b33525a31f225f47a4ca84e32e4e31397ab653b48f12f0a6ae23c8&mpshare=1&scene=1&srcid=&sharer_sharetime=1567569370392&sharer_shareid=778ad5bf3b27e0078eb105d7277263f6#rd")]),t._v(" "),a("p",[t._v("我觉得这里的标签可以按照 leecode 的题目来列")]),t._v(" "),a("p",[t._v("https://juejin.im/post/6844903482432962573")]),t._v(" "),a("h3",{attrs:{id:"参考资料"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[t._v("#")]),t._v(" 参考资料")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://juejin.im/book/6844733800300150797/section/6844733800342093832",target:"_blank",rel:"noopener noreferrer"}},[t._v("前端算法与数据结构面试"),a("OutboundLink")],1)])])}),[],!1,null,null,null);s.default=n.exports}}]);